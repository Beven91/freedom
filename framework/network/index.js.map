{"version":3,"sources":["webpack:///../framework/network/index.js"],"names":["Options","emitter","Network","uri","data","headers","any","method","emit","context","assert","defaultAssert","useTry","tryMax","promise","resolve","reject","doRequest","AttachResponse","tryProcess","tryRequest","bind","wx","request","url","combine","header","defaultContentType","merge","success","response","statusCode","isOK","tryAssert","fail","error","needTry","console","log","undefined","options","name","handler","on","contextResult","Object","defineProperty","writable","configurable","value","errorWrapper","result","then","catch","message","duration","loading","complete","callback","onlyCallback","JSON","parse","Error","original","afterResponse","max","errorAssert","isFunction","test","baseUri"],"mappings":"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","file":"../framework/network/index.js","sourcesContent":["/**\r\n * 名称：前端网络接口基础类\r\n * 日期：2017-12-24\r\n * 描述：基于wx.request 用于提供全局监听，以及派生业务接口用\r\n */\r\nimport { Type, EventEmitter } from 'dantejs'\r\n\r\nlet Options = {};\r\n//创建一个事件容器\r\nconst emitter = new EventEmitter();\r\n\r\nexport default class Network {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 接口全局配置\r\n     * @param {Object}  options 全局配置  { baseUri:'',data:{} }\r\n     */\r\n    static config(options) {\r\n        Options = options || {};\r\n    }\r\n\r\n    /**\r\n     * 添加一个全局监听事件 \r\n     * @param {String} name 事件名称 目前支持 response / error\r\n     * @param {Function} handler 响应函数\r\n     * response ：  function(response){    }\r\n     * error: function(error){}\r\n     */\r\n    static on(name, handler) {\r\n        emitter.on(name, handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 发送一个get请求\r\n     * @param {String} uri 服务端接口url 可以为完整路径或者相对路径\r\n     * 完整路径例如: https://api.pendragon/rest/order/submit\r\n     * 相对路径： 相对路径是相对于 Network.config() 配置的 baseUri\r\n     * @param {Object/FormData} 发送的正文数据 ，可以为json对象或者字符串或者FormData\r\n     * @param {Object} headers  发送报文首部配置\r\n     */\r\n    get(uri, data, headers) {\r\n        return this.any(uri, data, 'Get', headers);\r\n    }\r\n\r\n    /**\r\n     * 发送一个post请求\r\n     * @param {String} uri 服务端接口url 可以为完整路径或者相对路径\r\n     * 完整路径例如: https://api.pendragon/rest/order/submit\r\n     * 相对路径： 相对路径是相对于 Network.config() 配置的 baseUri\r\n     * @param {Object/FormData} 发送的正文数据 ，可以为json对象或者字符串或者FormData\r\n     * @param {Object} headers  发送报文首部配置\r\n     */\r\n    post(uri, data, headers) {\r\n        return this.any(uri, data, 'Post', headers);\r\n    }\r\n\r\n    /**\r\n     * 发送一个网络请求\r\n     * @param {String} uri 服务端接口url 可以为完整路径或者相对路径\r\n     * 完整路径例如: https://api.pendragon/rest/order/submit\r\n     * 相对路径： 相对路径是相对于 Network.config() 配置的 baseUri\r\n     * @param {Object} 发送的正文数据 ，可以为json对象或者字符串或者\r\n     * @param {String} method 请求类型 例如 Get Post Put Delete 等\r\n     * @param {Object} headers  发送报文首部配置\r\n     */\r\n    any(uri, data, method, headers) {\r\n        emitter.emit('start', data, headers);\r\n        const context = { assert: defaultAssert, useTry: false, tryMax: 0, uri, data, method, headers };\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.doRequest(context, resolve, reject, 0);\r\n        })\r\n        return new AttachResponse(promise, context);\r\n    }\r\n\r\n    /**\r\n     * 发送wx.request请求\r\n     * @param {Function} resolve 成功的回调通知函数\r\n     * @param {Function} reject 失败时的回调通知函数\r\n     * @param {Object} context 请求上下文参数\r\n     * @param {Number} tryProcess 当前尝试的次数\r\n     */\r\n    doRequest(context, resolve, reject, tryProcess) {\r\n        const { uri, data, headers, method } = context;\r\n        const tryRequest = this.tryRequest.bind(this, context, reject, resolve, tryProcess);\r\n        wx.request({\r\n            url: combine(uri, method, data),\r\n            //请求谓词\r\n            method,\r\n            //请求首部\r\n            header: {\r\n                'X-P': 'wxapp',\r\n                'Content-Type': Options.defaultContentType || 'application/x-www-form-urlencoded',\r\n                //合并传入的headers 传入的headers会覆盖前面行配置的默认headers\r\n                ...headers,\r\n            },\r\n            //请求正文\r\n            data: merge(data, Options.data),\r\n            //请求成功\r\n            success: (response) => {\r\n                const { statusCode } = response;\r\n                const isOK = statusCode >= 200 && statusCode < 300 || statusCode === 304;\r\n                const tryAssert = context.useTry && context.assert(response);\r\n                emitter.emit('end', response);\r\n                emitter.emit('response', response);\r\n                if (isOK && !tryAssert) {\r\n                    resolve(response)\r\n                } else if (!tryRequest()) {\r\n                    reject(response);\r\n                    emitter.emit('error', response);\r\n                }\r\n            },\r\n            //请求失败\r\n            fail: (error) => {\r\n                if (!tryRequest()) {\r\n                    emitter.emit('end', error);\r\n                    emitter.emit('error', error);\r\n                    reject(error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 请求重试\r\n     * @param {Function} resolve 成功的回调通知函数\r\n     * @param {Function} reject 失败时的回调通知函数\r\n     * @param {Object} context 请求上下文参数\r\n     * @param {Number} tryProcess 当前尝试的次数\r\n     */\r\n    tryRequest(context, reject, resolve, tryProcess) {\r\n        const { useTry, tryMax } = context;\r\n        const needTry = useTry && tryProcess < tryMax;\r\n        console.log('retry uri:' + context.uri);\r\n        needTry ? this.doRequest(context, resolve, reject, ++tryProcess) : undefined;\r\n        return needTry;\r\n    }\r\n}\r\n\r\n/**\r\n * 链式钩子，用于丰富Network.get/post 返回对象\r\n */\r\nclass AttachResponse {\r\n\r\n    constructor(promise, context) {\r\n        this.contextResult = {};\r\n        Object.defineProperty(this, 'context', { writable: false, configurable: false, value: context });\r\n        this.promise = promise;\r\n    }\r\n\r\n    /**\r\n     * 添加一个请求回调，在请求完成后触发\r\n     * @param {Function} success 请求成功响应函数\r\n     * @param {Function} error  请求失败响应函数\r\n     * @returns this self\r\n     */\r\n    then(success, error) {\r\n        const errorWrapper = (result) => {\r\n            if (typeof error === 'function') {\r\n                return error(result);\r\n            } else {\r\n                emitter.emit('error', result);\r\n                return result;\r\n            }\r\n        }\r\n        this.promise = this.promise.then(success, errorWrapper);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 添加一个请求异常捕获回调\r\n     * @param {Function} errorHandle 异常处理函数\r\n     * @returns this self\r\n     */\r\n    catch(...params) {\r\n        this.promise = this.promise.catch(...params);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 本次接口显示悬浮的Loading效果\r\n     * @param {String} message loading效果显示的文案 默认为：请稍后...\r\n     * @param {Number} duration loaing效果显示时长 默认 1s 单位:秒\r\n     * @returns this self\r\n     */\r\n    showLoading(message, duration = 1) {\r\n        if (typeof Options.loading === 'function') {\r\n            this.complete(Options.loading(message, duration))\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 回调处理，不管是成功还是失败，都出发该回调\r\n     * @param  {Function} callback 回调函数\r\n     */\r\n    complete(callback) {\r\n        const onlyCallback = (context) => { callback(); return context; }\r\n        this.then(onlyCallback, onlyCallback);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设定返回json数据\r\n     */\r\n    json() {\r\n        return this.then((response) => JSON.parse(response));\r\n    }\r\n\r\n    /**\r\n     * 合并其他请求\r\n     * @param {Promise} promise 其他请求返回的promise\r\n     * @param {String} name 当前合并请求的结果附加的属性名称\r\n     */\r\n    merge(promise, name) {\r\n        if (name === 'original') {\r\n            throw new Error(`name参数不能为original,改名称为默认返回值`)\r\n        }\r\n        const contextResult = this.contextResult;\r\n        return this.then((response) => {\r\n            if (!contextResult.original) {\r\n                contextResult.original = response;\r\n            }\r\n            return promise.then((afterResponse) => {\r\n                contextResult[name] = afterResponse;\r\n                return contextResult;\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 开启重试机制\r\n     * 当网络访问失败时，进行重试\r\n     * @param {Number} max 重试最大的次数 默认值=1\r\n     * @param {Function} errorAssert 需要进行重试的条件函数,默认重试条件为:请求网络错误\r\n     *         例如: function(response){ return response.status!=200  };\r\n     *           \r\n     */\r\n    try(max = 1, errorAssert) {\r\n        this.context.useTry = true;\r\n        this.context.tryMax = max;\r\n        if (Type.isFunction(errorAssert)) {\r\n            this.context.assert = errorAssert;\r\n        }\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 合并全局参数\r\n * @param {Object/String/ArrayBuffer} data 请求参数\r\n * @param {Object} merge 全局参数\r\n */\r\nfunction merge(data, merge) {\r\n    data = data || {};\r\n    merge = merge || {};\r\n    if (typeof data === 'object') {\r\n        return { ...merge, ...data };\r\n    } else {\r\n        return data;\r\n    }\r\n}\r\n\r\n/**\r\n * 合并uri\r\n * @param {String} uri 请求的uri路径\r\n * @param {String} method 请求类型\r\n * @param {Object} data 请求数据\r\n */\r\nfunction combine(uri, method, data) {\r\n    if (!/(https:|http:)/.test(uri) && Options.baseUri) {\r\n        uri = Options.baseUri + uri;\r\n    }\r\n    return uri;\r\n}\r\n\r\nfunction defaultAssert() {\r\n    return false;\r\n}"],"sourceRoot":""}